
# This file inside pipresents/pp_io_config will be used by Pi Presents if keys.cfg has not been found in a profile.
# A keys.cfg can be placed in a profile in its /pp_io_config directory. The profile will be searched first then here.

#   This fallback file in /pipresents/pp_io_config defines keys used:
#   -   Out of the box by mediashow, liveshow and menu.
#   -   In the manual's examples, in templates, and in the github examples

#  keys for hyperlinkshow and radiobuttonshow are not bound here as they will be different for each profile.
#  Examples are to be found in keys.cfg in the profile for the examples of these shows.

# This file  might be overwritten by updates
# If you edit it make a copy and place in the profile that is to use it.

# There is no checking of the content of this file by Pi Presents, try any changes by
#  running from a terminal window so that any exceptions are reported.

# This file binds keyboard keys to the symbolic names of the input events. Input events are of two types

#  - Show/track control - The input event affects shows/tracks. The Controls Field of shows and tracks bind symbolic names
#  - for input events to commands e.g. play-my5 play track5
#  - Direct  - the input event affects Pi Presents, for example by exiting it.

# !!! If using this alternative Tkinter keyboard driver include a dummy disabled keys.cfg in the profile 
#     or remove keys.cfg from /pipresents/pp_io_config


# All I/O SECTIONS
# ================
#    direction - in,out,none  if none then the section is ignored. out is currentyl not used in keys.cfg


# INPUT SECTIONS
# ===============
# direction = in
# mode - specific-character, any-character, specific-line, any-line
# name  - the symbolic name of the event which is generated if the input matches the match
# match - the condition for matching 

# for mode = specific character
# match may be:
# . a printable (non-special) character
# . a special key which is a name enclosed in <> e.g. <Up> 
# . <Return> cannot be used as it is used to detect end of line

#    Theses terms are defined in
#    effbot.org/tkinterbook/tkinter-events-and-bindings.htm  in the <Return>, a, and <Shift-Up> sections.

# In additon to the specific-character input sections if bind-printing = yes in the [DRIVER] section all the printable (non-special) characters
# (the ones obeying the <Key> condition in the reference) are automatically bound by Pi Presents to the
# symbolic name pp-key-x   e.g the 'a' key produces pp-key-a
# automatic binding of printing keys can be overriden by individual specific-character input sections.

# the match conditions and the symbolic names are case sensitive.



# THE REAL STUFF
# ==============

[DRIVER]
title = Tkinter Keys Plus  
enabled = yes
bind-printing = no
module= pp_kbddriver_plus


# DIRECT SYMBOLIC NAMES
# =====================
# These symbolic names cannot be used in the Controls Field of tracks and shows, they operate
# on Pi Presents directly. Use Show Control commands if you want to do the tasks below from a profile.


# should e keystroke be offered to the line?


[PP01]
# bind CTRL-BREAK key for terminating (aborting) Pi Presents
direction = in
mode = specific-character 
match = <Break>
name = pp-terminate

[PP02]
# alternative for keyboards without BREAK key
direction = none
mode = specific-character 
match = <Control-F1>
name  = pp-terminate   ; make CTRL+F1 do an exit in addition to CTRL+BREAK

[PP03]
#  if enabled pressing the k key will cause PP to shutdown the Pi immediately
direction = none
mode = specific-character 
match = k
name = pp-shutdownnow 

[PP04]
#  if enabled pressing the e key will cause PP to exit immediately
direction = none
mode = specific-character 
match = e
name = pp-exitpipresents


# SHOW/TRACK SYMBOLIC NAMES
# =========================

# ----------  bind keys for the Pi Presents mediashow, menu and liveshow commands used in examples
[ST01]
direction = in
mode = specific-character 
match = <Escape>
name = pp-stop

[ST02]
direction = in
mode = specific-character 
match = <Up>
name = pp-up

[ST03]
direction = in
mode = specific-character 
match = <Down>
name = pp-down

[ST04]
direction = in
mode = specific-character 
match = <Return>
name = pp-play
# return is also used for eol detection

[ST05]
direction = in
mode = specific-character
match = <space>
name = pp-pause


[ST06]
# make key 'a' toggle pause in addition to the spacebar
# if bind-printing = yes and this section is enabled the 'a' key will not be bound to pp-key-a
direction = in
mode = specific-character 
match = a
name = pp-pause

[ST07]
direction = in
mode = any-character 
name = any-character


[ST08]
# alternative to Reeurn for detecting end of line
direction = in
mode = any-line 
name = any-line


[ST09]
# detect a specific string
direction = in
mode = specific-line
match = again
name = specific-line


