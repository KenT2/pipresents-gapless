# USE
# ===
# This is an example configuration file for the i/o plugin pp_serialdriver.py
# it defines input and output events and maps them to serial inputs and outputs

# the output commands in this example are for NEC PA522UG projector but have not been tested.

# This file in /pipresents/pp_resources/pp_templates may be overwritten by updates and is not used by Pi Presents
# You must copy the file to the profile that is to use it. Place it in the directory myprofile/pp_io_config.

# There is little checking of the content of this file by Pi Presents, try any changes by
#  running from a terminal window so that any exceptions are reported

# DRIVER SECTION
# ==============
# These fields are required by all drivers:
# title = MY DEVICE   text which is reported on logs and error reports
# enabled = yes   yes/no a driver can be enabled/disabled using this so this file can be left in pp_io_config
# module = pp_serialdriver -  the python module that implements this driver (without .py). More than one I/O config file can use the same driver.

# These fields are for  pp_serialdriver.py:
# a. The identity of the serial port.
# b. the Baud Rate, Stop Bit, Parity and Data Byte size of the port.
# c. tick interval, mode, and eol character for input

	
# INPUT AND OUTPUT SECTIONS
# ==============
# Every section has a section name e.g. [MYSECTION1] - it may be any single word provided it is unique
# Every section must have a direction field which is in or out


# INPUT SECTIONS
# ==============
# direction = in
# name  - the symbolic name of the event that will be generated if the input is received
# mode  - A serial input receives characters which are split into lines at the end of line (eol) character. Depending  on the mode an event with symbolic name name will be generated:
#      any-char - reception of every character except eol will cause an input event
#      specific-char - reception of the 'match' character will cause an input event
#      any-line - reception of every line, even empty, will cause an input event
#     specific-line -  reception of the 'match' line will cause an input event
# match -  if the input matches this character or string then an event with symbolic name 'name' will be generated. sting should not include eol
	

	
# OUTPUT SECTIONS
# ==============
# direction = out

# name -
# type -
# if name and type match the animation command then the command will be considered for execution

# value -
# if the value field of the config data is not blank and matches the parameter value field in the animation command then message-type and message will be used to send to the port
# if the value field of the config data is blank then the  parameter type and parameter value from the animation command is sent

# message-type - 
# message -
# the message-type may be bytes or string
#     if bytes the message must be hex bytes seperated by spaces
#     if string then the string may include embedded spaces, leading spaces are removed

# NOTE: in the animation command the bytes or string must be surrounded by double quotes
# e.g. "01 02", "this is a string" 


# THE REAL STUFF
# ==============

[DRIVER]
title = SERIAL PORT
enabled = yes
module= pp_serialdriver


# PORT CONFIGURATION
# this is the serial port you are going to use
port-name = /dev/ttyUSB0

# baud rate, options are 50, 75, 110, 134, 150, 200, 300, 600, 1200, 1800, 2400, 4800, 9600, 19200, 38400, 57600, 115200
baud-rate = 38400

#parity, options are none, odd, even       
parity-bit = none

# stop bits, options are 1 or 2	  
stop-bits = 1		  

# byte size, options are numeric value 5, 6, 7, or 8
byte-size = 8

# INPUT CONFIGURATION
tick-interval = 50    ; mS
# match-mode - char/line whether input matching is one character or a complete line
match-mode = char
# eol character for line input (hex)
eol-char = 0D  ;CR


#INPUT SECTIONS
#--------------
# if using this for a real projector there should be no inputs as projector will send replies which may cause spurious matches.
[in01]
direction = in
mode = specific-character
match = d
name = pp-down


# OUTPUT SECTIONS
# --------------
# SOME OUTPUTS HAVING PARAMETER VALUES IN CONFIG DATA

# animation command  - 0 projector power on
[out01]
direction = out
name = projector
type = power
# because the value is not blank the message-type and  message are used to send to the port
value = on
message-type = bytes
message = 02 00 00 00 00 02

[out02]
direction = out
name = projector
type = power
value = off
message-type = bytes
message = 02 01 00 00 00 03


[out03]
direction = out
name = projector
type = picture-mute
value = on
message-type = bytes
message = 02 10 00 00 00 12


[out04]
direction = out
name = projector
type = picture-mute
value = off
message-type = bytes
message = 02 11 00 00 00 13


# GENERIC SERIAL SEND, VALUE SPECIFIED IN ANIMATION COMMAND
# if the VALUE field of the config data is blank then the  parameter type and parameter value from the animation command is sent

# send a string of characters
# animation command  - 0 serial-send string "abc de"
# string must be enclosed in double quotes
[out10]
direction = out
name = serial-send
type = string
value = 


# send some bytes
# animation command  - 0 serial-send bytes "30 31 32 33 34 35"
# value must be in double quotes with bytes seperated by space
# bytes values must be hex
[out11]
direction = out
name = serial-send
type = bytes
value = 
